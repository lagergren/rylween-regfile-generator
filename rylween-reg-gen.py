#!/usr/bin/env python3

import base64
import os
import sys

argv = sys.argv
argc = len(argv)

def usage():
    script = argv[0].split(os.sep)[-1]
    print("Usage: ", script, "<name of owner> [output file]")
    print()
    print("If no output file is given, a Base64 encoding of the registration file is written to stdout.")
    print()
    print("The resulting file, or base64 encoding of the output string should be")
    print("placed in 'Doors:Rylween/RYLWEEN.REG' to register a copy of Adventurers of Rylween")
    print("running in an Amiga environment.")
    print()
    print("Example:", script, "\"Alex May\"", "/tmp/RYLWEEN.REG")
    print("    (creates a registration file for Alex May and write it to disk.")
    print()
    print("Example:", script, "\"Lars Sid√©n\"")
    print("    (prints a Base64 encoding of a license file to stdout, that can be generated later)")

if argc != 2 and argc != 3:
    usage()
    sys.exit()

owner = argv[1];

def compute_checksum(owner):
    n = len(owner)
    return (sum(bytearray(owner, 'ascii')) * 5) + (n * n) + 617

checksum = compute_checksum(owner)
print("Rylween key for owner:", owner, "should have checksum", hex(checksum), "...");

# pad to 50 bytes
bytes = bytearray(owner, 'ascii')
while len(bytes) < 50:
    bytes.append(0)

# then put checksum: 4 byte big endian (as 68xxx, fwrite ULONG (== unsigned int == uint32_t))
bytes.extend(checksum.to_bytes(4, byteorder='big'))

if len(bytes) != 54:
    raise Exception("ERROR: Sanity check failed, generated byte array should be 54 bytes.")

if argc == 3: 
    output_file = argv[2]
    print("Writing reg file to path", output_file, "...")
    with open(output_file, "wb") as binary_file:
        binary_file.write(bytes)
    print("Done.")
else:
    base64_string = base64.b64encode(bytes)
    print("Base64 representation of license file:", base64_string.decode())
